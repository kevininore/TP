import java.util.Random;

public class TriRécursif {

	public static void main(String[] args) {

		int[] tableau = generate(4);
		triRecursif(tableau, 0, 3);
	}

	static public int[] generate(int size) {
		int[] tab = new int[size];
		Random rand = new Random();
		for (int i = 0; i < tab.length; i++) {
			tab[i] = (int) (Math.random() * 10);
		}

		for (int j = 0; j < tab.length; j++) {

			System.out.print(tab[j] + " ");

		}
		System.out.println(" ");
		return tab;
	}

	public static int[] trier(int[] tab, int debut, int fin) {

		int diff = (fin - debut) / 2;
		int[] t1 = trier(tab, debut, debut + diff);
		int[] t2 = trier(tab, debut + diff + 1, fin);
		int[] res = new int[fin - debut + 1];
		// Fusion de t1 et t2 dans res.
		// res = fusion(t1, t2)
		for (int k = 0; k < tab.length; k++)
			System.out.print(tab[k]);
		return res;

	}

	public static int[] Permuter(int[] tab1, int i, int j) {
		int tmp = tab1[i];
		tab1[i] = tab1[j];
		tab1[j] = tmp;
		return tab1;
	}

	public static int[] partition(int[] tableau, int debut, int fin, int IndexPivot) {
		int c = fin;
		int p = tableau[IndexPivot];
		tableau = Permuter(tableau, debut, IndexPivot);
		for (int i = debut + 1; i < fin; i++) {
			if (tableau[i] < p) {
				c = c+1;
				tableau = Permuter(tableau, i, c);
			}

		}
		tableau = Permuter(tableau, c, debut);
		
		if (debut != IndexPivot) {
			tableau = partition(tableau, 0, IndexPivot, IndexPivot/2);
		}
		if(IndexPivot+1 != fin) {
			tableau = partition(tableau, IndexPivot+1, fin, (IndexPivot+fin)/2);
		}
		return tableau;

	}

	public static int[] triRecursif(int[] tableau, int debut, int fin) {
		int pivot = (debut + fin) / 2;
		if (debut < fin) {
			pivot = partition(tableau, debut, fin, pivot);
			tableau = triRecursif(tableau, debut, pivot);
			tableau = triRecursif(tableau, pivot + 1, fin);

		}
		for (int j = 0; j < tableau.length; j++) {
			System.out.print(tableau[j] + " ");

		}

		return tableau;
	}

	public static int[] triRapide(int[] tableau, int debut, int fin) {
		int pivot = Random (debut, fin);
		if (debut < fin) {
			pivot = partition(tableau, debut, fin, pivot);
			tableau = triRecursif(tableau, debut, pivot);
			tableau = triRecursif(tableau, pivot + 1, fin);

		}
		for (int j = 0; j < tableau.length; j++) {
			System.out.print(tableau[j] + " ");

		}

		return tableau;
	} // la méthode Random ne fonctionne pas

	public static int[] fusion(int[] tableau1, int[] tableau2) {
		int[] bigtableau = new int[tableau1.length + tableau2.length];
		int i1 = 0, i2 = 0;
		while (i1 < tableau1.length && i2 < tableau2.length) {
			if (i1 >= tableau1.length) {
				bigtableau[i1++] = tableau2[i2++];
			} 
			else if (i2 >= tableau2.length) {
				bigtableau[i1++] = tableau1;

			}
		}
	}
}
